package persistence.sql.ddl.query;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import persistence.sql.Dialect;
import persistence.sql.H2Dialect;
import persistence.sql.Person;
import persistence.sql.ddl.fixtures.TestEntityWithAutoIdStrategy;
import persistence.sql.ddl.fixtures.TestEntityWithIdentityIdStrategy;
import persistence.sql.ddl.fixtures.TestEntityWithNullableColumns;
import persistence.sql.ddl.fixtures.TestEntityWithTransientColumn;

import static org.assertj.core.api.Assertions.assertThat;

class CreateTableQueryBuilderTest {
    private final Dialect dialect = new H2Dialect();

    @Test
    @DisplayName("Should create a CREATE TABLE query")
    void shouldCreateCreateTableQuery() {
        CreateTableQueryBuilder queryBuilder = new CreateTableQueryBuilder(dialect, Person.class);
        String query = queryBuilder.build();

        assertThat(query).isEqualTo(
                "CREATE TABLE users (id BIGINT GENERATED BY DEFAULT AS IDENTITY, nick_name VARCHAR(255), old INTEGER, email VARCHAR(255) NOT NULL, PRIMARY KEY (id));"
        );
    }

    @Test
    @DisplayName("Should create create table query for TestEntityWithAutoIdStrategy")
    void shouldCreateCreateTableQueryForEntityWithAutoIdStrategy() {
        CreateTableQueryBuilder queryBuilder = new CreateTableQueryBuilder(dialect, TestEntityWithAutoIdStrategy.class);
        String query = queryBuilder.build();

        assertThat(query).isEqualTo(
                "CREATE TABLE TestEntityWithAutoIdStrategy (id BIGINT , PRIMARY KEY (id));");
    }

    @Test
    @DisplayName("Should create a CREATE TABLE query for TestEntityWithIdentityIdStrategy")
    void shouldCreateCreateTableQueryForEntityWithIdentityIdStrategy() {
        CreateTableQueryBuilder queryBuilder = new CreateTableQueryBuilder(dialect, TestEntityWithIdentityIdStrategy.class);
        String query = queryBuilder.build();

        assertThat(query).isEqualTo(
                "CREATE TABLE TestEntityWithIdentityIdStrategy (id BIGINT GENERATED BY DEFAULT AS IDENTITY, PRIMARY KEY (id));"
        );
    }

    @Test
    @DisplayName("Should create a CREATE TABLE query for TestEntityWithNullableColumns")
    void shouldCreateCreateTableQueryForNullableTestEntity() {
        CreateTableQueryBuilder queryBuilder = new CreateTableQueryBuilder(dialect, TestEntityWithNullableColumns.class);
        String query = queryBuilder.build();

        assertThat(query).isEqualTo(
                "CREATE TABLE TestEntityWithNullableColumns (id BIGINT GENERATED BY DEFAULT AS IDENTITY, nullableColumn1 VARCHAR(255), nullableColumn2 VARCHAR(255), nonNullableColumn VARCHAR(255) NOT NULL, PRIMARY KEY (id));"
        );
    }

    @Test
    @DisplayName("Should create a CREATE TABLE query for TestEntityWithTransientColumn")
    void shouldCreateCreateTableQueryForTransientTestEntity() {
        CreateTableQueryBuilder queryBuilder = new CreateTableQueryBuilder(dialect, TestEntityWithTransientColumn.class);

        // When
        String query = queryBuilder.build();

        // Then
        assertThat(query).isEqualTo(
                "CREATE TABLE TestEntityWithTransientColumn (id BIGINT GENERATED BY DEFAULT AS IDENTITY, normalColumn VARCHAR(255), PRIMARY KEY (id));"
        );
    }
}
